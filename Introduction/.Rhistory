plot(cars)
plot(cars)
nycflights13
library(nycflights13)
nycflights13
nycflights13::airlines
nycflights13::flights
?nycflights13
help(nycflights13)
?gapminder
gapminder
library(gapminder)
gapminder
library(Lahman)
Lahman::battingStats()
# ライブラリのロードをしないと使えない
library(tidyverse)
plot(iris$Sepal.Length)
plot(iris$Sepal.Length, iris$Sepal.Width)
iris
#
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, col = Species)
#
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, col = Species))
# これがチャンクです
plot(cars)  # R コマンド
plot(iris$Sepal.Length, iris$Sepal.Width)
# 必要なパッケージのインストール - 1回だけやれば次からはOK
# install.packages(c("tidyverse", "nycflights13", "gapminder", "Lahman"))
# tidyverse： データの加工や可視化などを含むパッケージ
# nycflights13：ニューヨーク空港のいろいろなデータ
# gapminder：世界各国の寿命のデータ
# Lahman：メジャーリーグの選手の成績データ
# install.packages("plotly")
# ライブラリのロードをしないと使えない
library(tidyverse)
# 使用例（あとで詳しく説明するのでまずは実行）
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, col = Species))
library(plotly)
p <- ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, col = Species))
ggplotly(p)
#
mpg
?mpg
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot2(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point(size = 1.5)
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point(size = 3)
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point(size = 3, alpha = 0.5)
ggplot(data = mpg, aes(x = displ, y = hwy, size = class)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, size = class)) +
geom_point(alpha = 0.5)
ggplot(data = mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point(size = 3)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(col = "blue")
ggplot(data = mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point(size = 3)
# aes()の指定の仕方
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy))
# ベース（再度）
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
# ファセット
ggplot(mpg, aes(displ, hwy, col = class())) +
geom_point(size = 3) +
facet_wrap(~class)
# ファセット
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 3) +
facet_wrap(~class)
# ファセット
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5) +
facet_wrap(~class)
# ファセット
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5, nrow = 4) +
facet_wrap(~class)
# ファセット
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5, nrow = 2) +
facet_wrap(~class)
# ファセット
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5) +
facet_wrap(~class, nrow = 2)
# ファセットグリッド
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5) +
facet_grid(drv~cyl, nrow = 2)
# ファセットグリッド
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5) +
facet_grid(drv~cyl)
# ファセットグリッド
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5) +
facet_grid(drv~cyl)
# ファセットグリッド
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 3, alpha = 0.5) +
facet_grid(drv~cyl)
# ファセットグリッド
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 2, alpha = 0.5) +
facet_grid(drv~cyl)
mpg
View(mpg)
View(diamonds)
?rnorm
View(bad_sample)
# 1行1レコードでない例（作り方は今はまだ理解しなくてOK）。
n <- 20                             　 # サンプルデータの長さを指定（nに20を代入）
bad_sample <- tibble(
time = seq(0, 10, length.out = n),   # 0から10まで、長さ n で等分割したデータ生成
X = rnorm(n, 0, 1),                  # 平均0、標準偏差1の正規分布に従う長さ n のデータ生成
Y = rnorm(n, 3, 2)                   # 平均3、標準偏差2の正規分布に従う長さ n のデータ生成
)
View(bad_sample)
# bad_sampleでも可視化できないことはない
ggplot(bad_sample) +
geom_line(aes(time, x), col = "blue") +
geom_line(aes(time, y), col = "red")
# 1行1レコードでない例（作り方は今はまだ理解しなくてOK）。
n <- 20                             　 # サンプルデータの長さを指定（nに20を代入）
bad_sample <- tibble(
time = seq(0, 10, length.out = n),   # 0から10まで、長さ n で等分割したデータ生成
x = rnorm(n, 0, 1),                  # 平均0、標準偏差1の正規分布に従う長さ n のデータ生成
y = rnorm(n, 3, 2)                   # 平均3、標準偏差2の正規分布に従う長さ n のデータ生成
)
View(bad_sample)
# bad_sampleでも可視化できないことはない
ggplot(bad_sample) +
geom_line(aes(time, x), col = "blue") +
geom_line(aes(time, y), col = "red")
# bad_sample を加工して可視化しやすくする
good_sample <- bad_sample %>%
gather(x, y, key = label, value = val)
ggplot(good_sample, aes(time, val, col = label)) +
geom_line()
# データの取り込み
file_data <- read_csv("./sample/file001.txt", skip = 19, col_names = FALSE)
file_data
file2 <- read_csv("./sample/file002.txt", skip = 19, col_names = FALSE)
file3 <- read_csv("./sample/file003.txt", skip = 19, col_names = FALSE)
file4 <- read_csv("./sample/file004.txt", skip = 19, col_names = FALSE)
file5 <- read_csv("./sample/file005.txt", skip = 19, col_names = FALSE)
# データをひとつのデータフレームにまとめる
file <- tibble(
time = file1$X1,
X1 = file1$X2,
X2 = file2$X2,
X3 = file3$X3,
X4 = file4$X4,
X5 = file5$X5
)
# データの取り込み
file1 <- read_csv("./sample/file001.txt", skip = 19, col_names = FALSE)
file1
# データをひとつのデータフレームにまとめる
file <- tibble(
time = file1$X1,
X1 = file1$X2,
X2 = file2$X2,
X3 = file3$X3,
X4 = file4$X4,
X5 = file5$X5
)
file
file1$X1
# データをひとつのデータフレームにまとめる
file <- tibble(
time = file1$X1,
X1 = file1$X2,
X2 = file2$X2,
X3 = file3$X2,
X4 = file4$X2,
X5 = file5$X2
)
file
# ggplot2 で扱いやすいように加工する
file <- file %>%
gather(-time, key = label, val = val)
file
ggplot(file, aes(time, val, col = label)) +
geom_line()
ggplot(file, aes(time, val, col = label)) +
geom_line() +
scale_x_continuous(name = "Frequency [Hz]") +
scale_y_continuous(name = "Frequency Response Function [(m/s2)/N]")
ggplot(file, aes(time, val, col = label)) +
geom_line() +
scale_x_continuous(name = "Frequency [Hz]") +
scale_y_continuous(name = "Frequency Response Function [(m/s2)/N]") +
ggtitle("FRF plot for file X1-X5"
)
p
p <- ggplot(file, aes(time, val, col = label)) +
geom_line() +
scale_x_continuous(name = "Frequency [Hz]") +
scale_y_continuous(name = "Frequency Response Function [(m/s2)/N]") +
ggtitle("FRF plot for file X1-X5")
p
# plotlyと組み合わせ
ggplotly(p)
# これがチャンクです
plot(cars)  # R コマンド
plot(iris$Sepal.Length, iris$Sepal.Width)
# 必要なパッケージのインストール - 1回だけやれば次からはOK
# install.packages(c("tidyverse", "nycflights13", "gapminder", "Lahman"))
# tidyverse： データの加工や可視化などを含むパッケージ
# nycflights13：ニューヨーク空港のいろいろなデータ
# gapminder：世界各国の寿命のデータ
# Lahman：メジャーリーグの選手の成績データ
# install.packages("plotly")
# ライブラリをロードしないと使えない
library(tidyverse)
# 使用例（次回以降詳しく説明するのでまずは実行してみよう！）
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, col = Species))
library(plotly)
# ggplot + plotly
p <- ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, col = Species))
ggplotly(p)
# ggplot2 に含まれているデータサンプル
mpg
# ベース
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
# ベースに色付け
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(col = "blue")
# クラスによる色付け
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point()
# クラスによる色付け＋マーカーサイズ＋透明度
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point(size = 3, alpha = 0.5)
# クラスによるマーカーシェイプ変更＋サイズ変更
ggplot(data = mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point(size = 3)
# ベース（再度）
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
# ファセット
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5) +
facet_wrap(~class, nrow = 2)
# ファセットグリッド
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 2, alpha = 0.5) +
facet_grid(drv~cyl)
# aes()の指定の仕方
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy))
View(mpg)
View(diamonds)
# 1行1レコードでない例（作り方は今はまだ理解しなくてOK）
n <- 20                             　 # サンプルデータの長さを指定（nに20を代入）
bad_sample <- tibble(
time = seq(0, 10, length.out = n),   # 0から10まで、長さ n で等分割したデータ生成
x = rnorm(n, 0, 1),                  # 平均0、標準偏差1の正規分布に従う長さ n のデータ生成
y = rnorm(n, 3, 2)                   # 平均3、標準偏差2の正規分布に従う長さ n のデータ生成
)
View(bad_sample)
# bad_sampleでも可視化できないことはない
ggplot(bad_sample) +
geom_line(aes(time, x), col = "blue") +
geom_line(aes(time, y), col = "red")
# bad_sample を加工して可視化しやすくする（やり方は今はまだ理解しなくてOK）
good_sample <- bad_sample %>%
gather(x, y, key = label, value = val)
ggplot(good_sample, aes(time, val, col = label)) +
geom_line()
# データの取り込み
file1 <- read_csv("./sample/file001.txt", skip = 19, col_names = FALSE)
file1
# とりあえず個別に読み込み
file2 <- read_csv("./sample/file002.txt", skip = 19, col_names = FALSE)
file3 <- read_csv("./sample/file003.txt", skip = 19, col_names = FALSE)
file4 <- read_csv("./sample/file004.txt", skip = 19, col_names = FALSE)
file5 <- read_csv("./sample/file005.txt", skip = 19, col_names = FALSE)
# データをひとつのデータフレームにまとめる
file <- tibble(
time = file1$X1,
X1 = file1$X2,
X2 = file2$X2,
X3 = file3$X2,
X4 = file4$X2,
X5 = file5$X2
)
file
# ggplot2 で扱いやすいように加工する
file <- file %>%
gather(-time, key = label, val = val)
file
p <- ggplot(file, aes(time, val, col = label)) +
geom_line() +
scale_x_continuous(name = "Frequency [Hz]") +
scale_y_continuous(name = "Frequency Response Function [(m/s2)/N]") +
ggtitle("FRF plot for file X1-X5")
p
# plotlyと組み合わせ
ggplotly(p)
mpg
View(mpg)
diamonds
bad_sample
iris   # base R のデータサンプル。←のように入力して　Enter を押すと中身が表示される
# これがチャンクです
plot(cars)  # R コマンド  Ctrl + Enter で実行
iris   # base R のデータサンプル。←のように入力して　Ctrl + Enter を押すと中身が表示される
plot(iris$Sepal.Length, iris$Sepal.Width)  # Ctrl + Enter を押す（以下省略）
mean(iris$Sepal.Length)
sd(iris$Sepal.Width)
# 必要なパッケージのインストール - 1回だけやれば次からはOK
install.packages(c("tidyverse", "nycflights13", "gapminder", "Lahman"))
# tidyverse： データの加工や可視化などを含むパッケージ
# nycflights13：ニューヨーク空港のいろいろなデータ
# gapminder：世界各国の寿命のデータ
# Lahman：メジャーリーグの選手の成績データ
install.packages("plotly")     # tidyverse に含まれる可視化パッケージ ggplot を拡張するパッケージ
# ライブラリをロードしないと使えない
library(tidyverse)
# 使用例（次回以降詳しく説明するのでまずは実行してみよう！）
ggplot(iris) +
geom_point(aes(Sepal.Length, Sepal.Width, col = Species))
library(plotly)
# ggplot + plotly
p <- ggplot(iris) +             # Ctrl + Shift + Enter でチャンク内すべて実行できます
geom_point(aes(Sepal.Length, Sepal.Width, col = Species))
ggplotly(p)
# ggplot2 に含まれているデータサンプル
mpg
# ベースとなるプロット
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
# ベースに色付け
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(col = "blue")
mpg
# クラスによる色付け
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point()
# クラスによる色付け＋マーカーサイズ＋透明度
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +
geom_point(size = 3, alpha = 0.5)
# クラスによるマーカーシェイプ変更＋サイズ変更
ggplot(data = mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point(size = 3)
ggplot(mpg, aes(displ, hwy, size = cyl, col = cyl)) +
geom_point()
# ベース（再度）
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
# ファセット
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 1.5) +
facet_wrap(~class, nrow = 2)
# ファセットグリッド
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point(size = 2, alpha = 0.5) +
facet_grid(cyl~drv)
# aes()の指定の仕方
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy))
ggsave("test.png", width = 10, height = 6, unit = "cm")
mpg
View(mpg)
diamonds
View(diamonds)
# 1行1レコードでない例（作り方はまだ理解しなくてOK）
n <- 20                             　 # サンプルデータの長さを指定（nに20を代入）
bad_sample <- tibble(
time = seq(0, 10, length.out = n),   # 0から10まで、長さ n で等分割したデータ生成
x = rnorm(n, 0, 1),                  # 平均0、標準偏差1の正規分布に従う長さ n のデータ生成
y = rnorm(n, 3, 2)                   # 平均3、標準偏差2の正規分布に従う長さ n のデータ生成
)
bad_sample
View(bad_sample)
# bad_sampleでも可視化できないことはない
ggplot(bad_sample) +
geom_line(aes(time, x), col = "blue") +
geom_line(aes(time, y), col = "red")
# bad_sample を加工して可視化しやすくする（やり方はまだ理解しなくてOK）
good_sample <- bad_sample %>%
gather(x, y, key = label, value = val)
good_sample
View(good_sample)
ggplot(good_sample, aes(time, val, col = label)) +
geom_hline(yintercept = 3, size = 1) +
geom_line() +
geom_point(size = 5)
# データの取り込み
file1 <- read_csv("./sample/file001.txt", skip = 19, col_names = FALSE)
# read_csv：csvデータを読み込むためのコマンド。カンマ区切りなら拡張子はcsv以外でも良い。
# "./sample/file001.txt"：読み込むファイル名の指定。
# skip = 19：冒頭19行までは読み込まない
# col_names = FALSE：列名は読み込まない
file1
# とりあえず個別に読み込み
file2 <- read_csv("./sample/file002.txt", skip = 19, col_names = FALSE)
file3 <- read_csv("./sample/file003.txt", skip = 19, col_names = FALSE)
file4 <- read_csv("./sample/file004.txt", skip = 19, col_names = FALSE)
file5 <- read_csv("./sample/file005.txt", skip = 19, col_names = FALSE)
# データをひとつのデータフレームにまとめる
file <- tibble(
freq = file1$X1,
X1 = file1$X2,
X2 = file2$X2,
X3 = file3$X2,
X4 = file4$X2,
X5 = file5$X2
)
file
# ggplot2 で扱いやすいように加工する
file <- file %>%
gather(-freq, key = label, val = val)
file
p <- ggplot(file, aes(freq, val, col = label)) +
geom_line() +
scale_x_continuous(name = "Frequency [Hz]") +
scale_y_continuous(name = "Frequency Response Function [(m/s2)/N]") +
ggtitle("FRF plot for file X1-X5")
p
# plotlyと組み合わせ
ggplotly(p)
diamonds
ggplot(diamonds, aes(carat, price, col = cut)) +
geom_point()
p <- ggplot(file, aes(freq, val, col = label)) +
geom_line() +
scale_x_continuous(name = "Frequency [Hz]") +
scale_y_continuous(name = "Frequency Response Function [(m/s2)/N]") +
ggtitle("FRF plot for file X1-X5")
p
ggsave("frf.png", width = 10, height = 6, unit = "cm")
ggsave("frf.png", width = 20, height = 12, unit = "cm")
# plotlyと組み合わせ
ggplotly(p)
p <- ggplot(file, aes(freq, val, col = label)) +
geom_line() +
scale_x_continuous(name = "Frequency [Hz]") +
scale_y_continuous(name = "Frequency Response Function [(m/s2)/N]") +
ggtitle("FRF plot for file X1-X5")
p
ggsave("frf.png", width = 20, height = 12, unit = "cm")
# plotlyと組み合わせ
ggplotly(p)
