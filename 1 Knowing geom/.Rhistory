ggplot(mpg, aes(x = class, fill = manufacturer)) +
geom_bar(position = "fill", col = "black")
?geom_bar
ggplot(mpg, aes(x = class, fill = manufacturer)) +
geom_bar()
ggsave("./exercise/ex3-1.png", width=20, height = 12, unit = "cm")
ggplot(mpg, aes(x = class, fill = manufacturer)) +
geom_bar(position = "fill", col = "black")
ggsave("./exercise/ex3-2.png", width=20, height = 12, unit = "cm")
ggplot(mpg, aes(x = class, fill = factor(cyl))) +
geom_bar()
ggsave("./exercise/ex3-3.png", width=20, height = 12, unit = "cm")
ggplot(mpg, aes(x = class, fill = factor(cyl))) +
geom_bar(position = "dodge", col = "black")
ggsave("./exercise/ex3-4.png", width=20, height = 12, unit = "cm")
ggplot(mpg, aes(cty)) +
geom_histogram()
ggplot(mpg, aes(cty)) +
geom_histogram()
ggplot(mpg, aes(hwy)) +
geom_histogram()
ggplot(diamonds, aes(price)) +
geom_histogram()
ggplot(diamonds, aes(price)) +
geom_histogram(col = "lightblue")
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "lightblue")
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "sky")
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "purple")
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "purple", bins = 20)
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "purple", bins = 10)
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "purple", bins = 20, col = "black")
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "purple", binwidth = 2000, col = "black")
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "purple", binwidth = 1000, col = "black")
ggplot(diamonds, aes(price)) +
geom_histogram(fill = "purple", binwidth = 500, col = "black")
x <- tibble(val = rnorm(10000, mean = 0, sd = 1))    # 標準正規分布にしたがう乱数を10000個生成
ggplto(x, aes(x)) +
geom_histogram()
x <- tibble(val = rnorm(10000, mean = 0, sd = 1))    # 標準正規分布にしたがう乱数を10000個生成
ggplot(x, aes(x)) +
geom_histogram()
ggplot(x, aes(val)) +
geom_histogram()
ggplot(x, aes(val)) +
geom_histogram(col = "purple")
ggplot(x, aes(val)) +
geom_histogram(col = "black", fill = "purple")
# 平均値
mean(x)
# 平均値
mean(x$val)
# 標準偏差
sd(x$val)
# 分位点を求める
summary(x$val)
mode(x$val)
ggplot(diamonds, aes(price, fill = cut)) +
geom_histogram(fill = "purple", col = "black")
ggplot(diamonds, aes(price, fill = cut)) +
geom_histogram(col = "black")
ggplot(diamonds, aes(price, col = cut)) +
geom_freqpoly()
ggplot(diamonds, aes(price, col = cut)) +
geom_freqpoly(size = 2)
ggplot(diamonds, aes(price, col = cut)) +
geom_freqpoly(size = 1)
ggplot(diamonds, aes(price, col = cut)) +
geom_freqpoly(size = 1)        # size を追加
x <- tibble(val = rnorm(10000, mean = 0, sd = 1))    # 標準正規分布にしたがう乱数を10000個生成
ggplot(x, aes(val)) +
geom_histogram(col = "black", fill = "green")
# geom_count
ggplot(diamonds) +
geom_count(aes(cut, color))
diamonds %>%
count(cut, color)
diamonds %>%
count(cut, color) %>%
ggplot(aes(color, cut)) +
geom_tile(aes(fill = n))
ggplot(diamonds) +
geom_bin2d(aes(carat, price))
?scale_color_gradient
?palette
?terrain.colors
ggplot(diamonds) +
geom_bin2d(aes(carat, cut)) +
scale_color_gradient(colors = rainbow)
ggplot(diamonds) +
geom_bin2d(aes(carat, cut)) +
scale_color_gradientn(colors = rainbow)
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_color_gradientn(colors = rainbow)
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_color_gradientn(colors = rainbow(7))
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_gradientn(colors = rainbow(7))
?terrain.colors
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_gradientn(colors = rainbow(21))
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_gradientn(colors = rainbow(7))
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_gradientn(colors = terrain.colors(10))
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_gray(star = 0.7, end =0)
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_grey(star = 0.7, end =0)
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_grey(start = 0.7, end =0)
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_continuous_grey(start = 0.7, end =0)
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_brewer(pallete = "Greys")
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_gradientn(pallete = "Greys")
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_color_gradientn(low = "black", high = "white")
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_color_gradient(low = "black", high = "white")
ggplot(diamonds) +
geom_bin2d(aes(carat, price)) +
scale_fill_gradient(low = "black", high = "white")
str(diamonds)
ggplot(diamonds, aes(cut, cut_number(carat, 10), col = price)) +
geom_bin2d()
ggplot(diamonds, aes(cut, cut_number(carat, 10))) +
geom_bin2d()
?geom_bin2d
ggplot(diamonds, aes(cut, cut_number(carat, 10), col = price)) +
geom_tile()
ggplot(diamonds, aes(cut, cut_number(carat, 10), fill = price)) +
geom_tile()
ggplot(diamonds, aes(cut, cut_number(carat, 10), fill = price)) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggplot(diamonds, aes(cut, cut_number(carat, 20), fill = price)) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggplot(diamonds, aes(cut, cut_number(carat, 15), fill = price)) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggplot(diamonds, aes(cut, cut_number(carat, 15), fill = price)) +
geom_tile() +
scale_fill_gradientn(colors =heat.colors(10) )
ggplot(diamonds, aes(cut, cut_number(carat, 15), fill = price)) +
geom_tile(col = "black") +
scale_fill_gradientn(colors =heat.colors(10))
ggplot(diamonds, aes(cut, cut_number(carat, 15), fill = price)) +
geom_tile(col = "grey") +
scale_fill_gradientn(colors =heat.colors(10))
ggplot(diamonds, aes(cut, cut_number(carat, 15), fill = price)) +
geom_tile(col = "black") +
scale_fill_gradientn(colors =heat.colors(10))
ggplot(diamonds, aes(cut, cut_number(carat, 15), fill = price)) +
geom_tile(col = "black", size = 1) +
scale_fill_gradientn(colors =heat.colors(10))
ggplot(diamonds, aes(cut, cut_number(carat, 15), fill = price)) +
geom_tile(col = "black", size = 0.5) +
scale_fill_gradientn(colors =heat.colors(10))
source('~/R/Meeting/1 Knowing geom/exercise/exercise.R', echo=TRUE)
ggplot(mpg, aes(class, drv, fill = hwy)) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggplot(mpg, aes(class, drv, fill = cut_number(5,hwy))) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggplot(mpg, aes(class, drv, fill = cut_number(hwy, 5))) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggsave("./exercise/ex4.png", width=20, height = 12, unit = "cm")
ggplot(mpg, aes(class, drv, fill = hwy)) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggsave("./exercise/ex4.png", width=20, height = 12, unit = "cm")
ggplot(mpg, aes(class, manufacturer, fill = hwy)) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggsave("./exercise/ex4.png", width=16, height = 16, unit = "cm")
ggsave("./exercise/ex4.png", width=18, height = 16, unit = "cm")
p <- ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point()
p
p <- ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point()
p
p + theme_bw()
p + labs(x = "排気量", y = "高速道路上の燃費")
p +
scale_x_continuous(name = "排気量") +
scale_y_continuous(name = "高速道路上の燃費")
p + labs(title = "クルマの排気量 vs 高速道路上の燃費")
?labs
p + labs(title = "クルマの排気量 vs 高速道路上の燃費", subtitle = "mpg データセット")
p + labs(title = "クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜")
p + ggtitle("クルマの排気量 vs 高速道路上の燃費", caption = "〜mpg データセット〜")
p + ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜")
?ggtitle
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜") +
theme(plot.title = element_text(hjust = 0.5))
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜") +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjus = 0.5))
?theme
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(1.2)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(2)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(10)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = 2))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = 10))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(2))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(2))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(2)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(5)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(4)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(6)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(5)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(5)),
strip.text = element_text(size = rel(5)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(5)),
label.text = element_text(size = rel(5)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(5)),
legend.text = element_text(size = rel(5)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(5)),
legend.text = element_text(size = rel(2))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(5)),
legend.text = element_text(size = rel(2)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(5)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p + theme(text = element_text(size = rel(4)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜") +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjus = 0.5))
theme(text = element_text(size = rel(4)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜") +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjus = 0.5)) +
theme(text = element_text(size = rel(4)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜") +
theme(text = element_text(size = rel(4)),
title = element_text(size = rel(4)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜") +
theme(text = element_text(size = rel(4)),
title = element_text(size = rel(2)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜") +
theme(text = element_text(size = rel(4)),
title = element_text(size = rel(1)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費") +
theme(text = element_text(size = rel(4)),
title = element_text(size = rel(1)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費") +
theme(text = element_text(size = rel(4)),
title = element_text(size = rel(2)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費") +
theme(text = element_text(size = rel(4)),
# title = element_text(size = rel(2)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費") +
theme(text = element_text(size = rel(4)),
plot.title = element_text(size = rel(2)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費") +
theme(text = element_text(size = rel(4)),
plot.title = element_text(size = rel(3)),
legend.text = element_text(size = rel(3)))
# 全体の大きさを変える：全文字列に適用
p +
ggtitle("クルマの排気量 vs 高速道路上の燃費") +
theme(text = element_text(size = rel(4)),
plot.title = element_text(size = rel(4)),
legend.text = element_text(size = rel(3)))
p +
scale_x_continuous(limits = c(4,7)) +
scale_y_continuous(limits = c(10, 30))
?scale_x_continuous
# 目盛りを変える
p +
scale_x_continuous(breaks = seq(1, 7, by = 0.5)) +
scale_y_continuous(breaks = seq(10, 40, by = 2.5)
# 目盛りを変える
p +
scale_x_continuous(breaks = seq(1, 7, by = 0.5)) +
scale_y_continuous(breaks = seq(10, 40, by = 2.5))
# 目盛りを変える
p +
scale_x_continuous(breaks = seq(1, 7, by = 0.5)) +
scale_y_continuous(breaks = seq(10, 50, by = 2.5))
seq(1, 7, by = 0.5)
# 目盛線の色や太さを変える
p +
theme(panal.grid.major = element_line(col = "black"))
?element_line
# 目盛線の色や太さを変える
p +
theme(panal.grid.major = element_line(color = "black"))
# 目盛線の色や太さを変える
p +
theme(panal.grid.major = element_line(color = "black"))
# 目盛線の色や太さを変える
p +
theme(panel.grid.major = element_line(color = "black"))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_line(col = "black"),
panel.grid.major = element_line(col = "black"))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_line(color = "black"),
panel.grid.major = element_line(color = "black"))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black"),
panel.grid.major = element_line(color = "black"))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black"),
panel.grid.major = element_line(color = "black"))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black"))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black", size = 0.5))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black", size = 0.1))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black", size = 0.2))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black", size = 0.3))
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black", size = 0.3),
panel.grid.minor = element_line(color = "black", size = 0.3)
)
# 目盛線の色や太さを変える
p +
thme_bw() +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black", size = 0.3),
panel.grid.minor = element_line(color = "black", size = 0.3)
)
# 目盛線の色や太さを変える
p +
theme_bw() +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black", size = 0.3),
panel.grid.minor = element_line(color = "black", size = 0.3)
)
# 目盛線の色や太さを変える
p +
theme(
panel.border = element_rect(color = "black", fill = NA),
panel.grid.major = element_line(color = "black", size = 0.3),
panel.grid.minor = element_line(color = "black", size = 0.3)
)
# 目盛線を非表示にする
p +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggplot(diamonds(cut, price)) +
geom_boxplo()
ggplot(diamonds, aes(cut, price)) +
geom_boxplo()
ggplot(diamonds, aes(cut, price)) +
geom_boxplot()
ggplot(diamonds, aes(cut, price)) +
geom_boxplot() +
coord_flip()
# facet_wrap
ggplot(diamonds, aes(cut, price)) +
geom_point() +
facet_wrap(~clarity)
# facet_wrap
ggplot(diamonds, aes(cut, price)) +
geom_boxplot() +
facet_wrap(~clarity)
# facet_wrap
ggplot(diamonds, aes(cut, price)) +
geom_boxplot() +
facet_wrap(~clarity, nrow = 2)
# facet_wrap
ggplot(diamonds, aes(cut, price)) +
geom_boxplot() +
facet_wrap(~clarity, ncol = 2)
diamonds
# facet_wrap
ggplot(diamonds, aes(cut, carat)) +
geom_boxplot() +
facet_wrap(~clarity, ncol = 2)
# facet_wrap
ggplot(diamonds, aes(cut, price)) +
geom_boxplot() +
facet_wrap(~color, ncol = 2)
# facet_wrap
ggplot(diamonds, aes(carat, price)) +
geom_point() +
facet_wrap(~cut, ncol = 2)
# facet_grid
ggplot(diamonds, aes(carat, price)) +
geom_point() +
facet_grid(color~cut, ncol = 2)
# facet_grid
ggplot(diamonds, aes(carat, price)) +
geom_point() +
facet_grid(color~cut)
?diamonds
str(mpg)
source('~/R/Meeting/1 Knowing geom/exercise/exercise.R', echo=TRUE)
ggsave("./exercise/ex4.png", width=18, height = 16, unit = "cm")
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point() +
facet_grid(drv~cyl)
ggplot(mpg, aes(class, manufacturer, fill = hwy)) +
geom_tile() +
scale_fill_gradientn(colors = rainbow(7))
ggsave("./exercise/ex4.png", width=18, height = 16, unit = "cm")
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point() +
facet_grid(drv~cyl)
ggsave("./exercise/ex5.png", width=18, height = 16, unit = "cm")
ggsave("./exercise/ex5.png", width=24, height = 16, unit = "cm")
ggsave("./exercise/ex5.png", width=16, height = 10, unit = "cm")
