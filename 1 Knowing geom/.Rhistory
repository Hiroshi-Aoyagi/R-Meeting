diamonds
library(tiyverse)
library(tidyverse)
diamonds
mpg
ggplot(diamonds, aes(carat, price)) +
geom_point()
ggplot(diamonds, aes(carat, price, col = cut)) +
geom_point()
# データの用意
time <- 1:100                      # 時間 1秒から100秒まで1秒刻みで作成
x <- rnorm(100, mean = 0, sd = 5)  # 正規分布にしたがう乱数を発生
df <- tibble(time , x)
df
# データの用意　　　　　　　　　　 # Ctrl + Shift + Enter で実行
time <- 1:100                      # 時間 1秒から100秒まで1秒刻みで作成
x <- rnorm(100, mean = 0, sd = 5)  # 正規分布にしたがう乱数を発生
df <- tibble(time , x)             # time と x を データフレーム df に
df                                 # df の確認
# データの描画
ggplot(df, aes(time, x)) +
geom_point()
ggplot(df, aes(time, x)) +
geom_point() +
geom_line()
ggplot(df, aes(time, x)) +
geom_point() +
geom_line(col = "blue")
# データの描画
ggplot(df, aes(time, x)) +
geom_point(size = 2)
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line()
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line(col = "blue")
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line(col = "yellow")
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line(col = "green")
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line(col = "purple")
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line(col = "white")
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line(col = "pink")
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line(col = "red")
ggplot(df, aes(time, x)) +
geom_line(col = "red") +    　# geom_line を先に実行
geom_point(size = 2)
# 基本
ggplo(mpg, aes(displ, hwy, col = class)) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point()
# 基本
ggplot(mpg, aes(displ, hwy, col = class)) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point()
# 基本
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point()
# データフレームに含まれるデータの変数名の確認
str(mpg)
# データフレームに含まれるデータの変数名の確認方法①
mpg
?aes()
ggplot(data = mpg, aes(x = displ, y = hwy), col = "red")) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
ggplot(data = mpg, aes(x = displ, y = hwy), col = "red") +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point()
ggplot(data = mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(x = displ, y = hwy, col = class))
# マーカーの色をすべて同じ色に変える
ggplot(data = mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(x = displ, y = hwy), col = "red"))
# マーカーの色をすべて同じ色に変える
ggplot(data = mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(x = displ, y = hwy), col = "red")
# data = や x = を省略
ggplot(mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(displ, hwy, col = class))
# データフレームに含まれるデータの変数名の確認方法①
mpg
library(tidyverse)
diamonds   # Ctrl + Enter で実行
mpg   # Ctrl + Enter で実行
# データの用意　　　　　　　　　　 # Ctrl + Shift + Enter で実行
time <- 1:100                      # 時間 1秒から100秒まで1秒刻みで作成
x <- rnorm(100, mean = 0, sd = 5)  # 正規分布にしたがう乱数を発生
df <- tibble(time , x)             # time と x を データフレーム df に
df                                 # df の確認
# データの描画
ggplot(df, aes(time, x)) +
geom_point(size = 2)
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line()
ggplot(df, aes(time, x)) +
geom_point(size = 2) +
geom_line(col = "red")
ggplot(df, aes(time, x)) +
geom_line(col = "red") +    　# geom_line を先に実行
geom_point(size = 2)
# 基本
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point()
# データフレームに含まれるデータの変数名の確認方法①
str(mpg)
# データフレームに含まれるデータの変数名の確認方法②
mpg
# geom の中で　aes() を指定する
ggplot(data = mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(x = displ, y = hwy, col = class))
# マーカーの色をすべて同じ色に変える
ggplot(data = mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(x = displ, y = hwy), col = "red")  # col を aes() の外に出す
# data = や x = を省略
ggplot(mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(displ, hwy, col = class))
?geom_point
ggplot(mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(displ, hwy, col = class), jitter = TRUE)
?aes()
ggplot(mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(displ, hwy, col = class), position = jitter)
ggplot(mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン）
geom_point(aes(displ, hwy, col = class), position = "jitter")
?geom_jitter
# geom_jitter
ggplot(mpg) +
geom_jitter(aes(displ, hwy, col = class))
# geom_jitter
ggplot(mpg) +
geom_jitter(aes(displ, hwy, col = class), width = 1)
# geom_jitter
ggplot(mpg) +
geom_jitter(aes(displ, hwy, col = class), width = 1, height = 1)
# geom_jitter
ggplot(mpg) +
geom_jitter(aes(displ, hwy, col = class))
# データに適合する
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_abline(lm(hwy ~ displ))
# データに適合する
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_abline(lm(mpg$hwy ~ mpg$displ))
# データに適合する
ggplot(mpg, aes(displ, hwy)) +
geom_ssmooth()
# データに適合する
ggplot(mpg, aes(displ, hwy)) +
geom_smooth()
# データに適合する
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth()
?geom_smooth
# データに適合する
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "lm")
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(method = "loess")  # 線形回帰
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy, col = class)) +
geom_point() +
geom_smooth(method = "loess")  # loess による適合
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy, col = drv)) +
geom_point() +
geom_smooth(method = "loess")  # loess による適合
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy, group = drv)) +
geom_point() +
geom_smooth(method = "loess")  # loess による適合
ggplot(mpg, aes(displ, hwy, col = drv)) +
geom_point(size = 2, col = "white")
ggplot(mpg, aes(displ, hwy, col = drv)) +
geom_point(size = 3, col = "white") +
geom_point()
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy, col = drv)) +
geom_point() +
geom_smooth(method = "loess", show.legend = FALSE)  # loess による適合
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy, col = drv)) +
geom_point() +
geom_smooth(method = "loess")  # loess による適合
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(mpg, aes(displ, hwy, group = drv)) +
geom_point(size = 2) +
geom_smooth(se = FALSE)
ggsave("ex2.png", width=12, height = 8, unit = "cm")
ggplot(mpg, aes(displ, hwy, group = drv)) +
geom_smooth(se = FALSE) +
geom_point(size = 2)
ggsave("ex2.png", width=12, height = 8, unit = "cm")
ggplot(mpg, aes(displ, hwy, col = drv)) +
geom_smooth(se = FALSE) +
geom_point(size = 2)
ggsave("ex3.png", width=12, height = 8, unit = "cm")
ggplot(mpg, aes(displ, hwy)) +
geom_smooth(se = FALSE) +
geom_point(aes(col = drv), size = 2)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(col = drv), size = 2) +
geom_smooth(se = FALSE)
ggsave("ex4.png", width=12, height = 8, unit = "cm")
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(col = drv), size = 2) +
geom_smooth(aes(type = drv), se = FALSE) +
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(col = drv), size = 2) +
geom_smooth(aes(type = drv), se = FALSE)
?geom_line
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(col = drv), size = 2) +
geom_smooth(aes(linetype = drv), se = FALSE)
ggsave("ex5.png", width=12, height = 8, unit = "cm")
ggplot(mpg, aes(displ, hwy)) +
geom_point(size = 3, col = "white") +
geom_point(aes(col = drv))
ggplot(mpg, aes(displ, hwy)) +
geom_point(size = 5, col = "white") +
geom_point(aes(col = drv), size = 3)
ggsave("ex6.png", width=12, height = 8, unit = "cm")
ggplot(mpg, aes(displ, hwy)) +
geom_point(size = 3, col = "white") +
geom_point(aes(col = drv), size = 2)
e
ggplot(mpg, aes(class, hwy)) +
geom_boxplot()
ggplot(mpg, aes(class, hwy)) +
geom_boxplot()
ggplot(mpg, aes(class, hwy, fill = class)) +
geom_boxplot()
str(diamonds)
# 棒グラフ
ggplot(diamonds) +
geom_bar(aes(cut))
# cut ごとの diamonds の平均価格
price.mean <- diamonds %>%
group_by(cut) %>%
summarize(
price = mean(price)
)
price.mean
ggplot(aes(cut)) +
geom_boxplot()
ggplot(diamonds, aes(cut)) +
geom_boxplot()
ggplot(diamonds, aes(cut, price)) +
geom_boxplot()
# 棒グラフ
ggplot(price.mean, aes(price)) +
geom_bar(position = "identity")
# 棒グラフ
ggplot(price.mean, aes(cut, price)) +
geom_bar(position = "identity")
# 棒グラフ
ggplot(price.mean) +
geom_bar(aes(cut, price), position = "identity")
# 棒グラフ
ggplot(price.mean) +
geom_bar(aes(cut, price), stat = "identity")
# cut ごとの diamonds の平均価格 - 後日説明
price.mean <- diamonds %>%
group_by(cut) %>%          # cut でデータをグループ化
summarize(                 # 要約量を出力する関数
price = mean(price)      # mean: 平均値を出力
)
# 棒グラフ
ggplot(price.mean, aes(col = cut)) +
geom_bar(aes(cut, price), stat = "identity")
# cut ごとの diamonds の平均価格 - 後日説明
price.mean <- diamonds %>%
group_by(cut) %>%          # cut でデータをグループ化
summarize(                 # 要約量を出力する関数
price = mean(price)      # mean: 平均値を出力
)
# 棒グラフ
ggplot(price.mean, aes(fill = cut)) +
geom_bar(aes(cut, price), stat = "identity")
str(diamonds)
str(mpg)
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy, group = drv)) +   # col → group に変更
geom_point() +
geom_smooth(method = "loess")  # loess による適合
# 箱ひげ図：色分け
ggplot(mpg, aes(class, hwy, fill = class)) +
geom_boxplot()
# 棒グラフ
ggplot(diamonds) +
geom_bar(aes(cut))
# cut ごとの diamonds の平均価格 - 後日説明
price.mean <- diamonds %>%
group_by(cut) %>%          # cut でデータをグループ化
summarize(                 # 要約量を出力する関数
price = mean(price)      # mean: 平均値を出力
)
# 棒グラフ
ggplot(price.mean, aes(fill = cut)) +          # geom_bar も fill で色分けする
geom_bar(aes(cut, price), stat = "identity")
