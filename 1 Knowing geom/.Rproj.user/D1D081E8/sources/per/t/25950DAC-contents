---
title: "Level1 - Geomを知る"
output: 
 html_notebook:
   css: font-style.css
---

前回はイントロダクションということで、何ができるようになるか、について紹介する内容でした。今回は実践に入ります。可視化をする場面はいろいろだと思いますが、思ったとおりの実験データが取れているか、変な数値が出てるところはないか、初めてやる実験のときには、変数間にどんな傾向があるのか、が知りたいために可視化することが多いと思います。そんなとき「〇〇をはっきりさせたい」という目的や仮説、主張がもちろんあると思うのですが、どんな風に可視化すればその主張を最も良く表現できるか、というのが問題になります。そのためには、そもそもどういう可視化方法があるのか知っていることが前提になる、ということで...。

<big>
今回の話題:  

* 様々な種類の geom を知る  
* 図を見やすくする  

</big>

geom とは、という説明をしても抽象的になるので、まずはやってみましょう。  

# geom を知る  

## ライブラリのロード  

まずは、可視化用ライブラリをロードします。  

```{r results = 'hide'}
library(tidyverse)
```

## 使うデータ  

今回は自作データと、tidyverse に含まれるデータを使います。  

* x: 時系列データの例（この後自作します）
* diamonds: ダイヤモンドのデータ（tidyverse に含まれる）
* mpg: 車の燃費のデータ（tidyverse に含まれる）

復習として、データを表示してみましょう。

```{r echo = TRUE}
diamonds   # Ctrl + Enter で実行
```

```{r echo = TRUE}
mpg   # Ctrl + Enter で実行
```

## geom の基本  

まずは説明に使うデータを自作します。

```{r}
# データの用意　　　　　　　　　　 # Ctrl + Shift + Enter で実行
time <- 1:100                      # 時間 1秒から100秒まで1秒刻みで作成
x <- rnorm(100, mean = 0, sd = 5)  # 正規分布にしたがう乱数を発生
df <- tibble(time , x)             # time と x を データフレーム df に
df                                 # df の確認
```

```{r}
# データの描画
ggplot(df, aes(time, x)) +
  geom_point(size = 2)
```

これは tidyverse パッケージに含まれる、ggplot2 というパッケージの機能を使っています。ggplot2 は次のような考え方でグラフを描画します。  

<big>
【ggplot2 による描画 - 階層グラフィックス文法】   

* ggplot() コマンドで、これから ggplot2 によるグラフ描画を始めることを宣言。  
* geom_point で、実際にグラフを描く。  
* geom を続けて実行すると、後に実行した geom（グラフ）が一番手前側に重ねられる。   
</big>

上の例では、geom が1回しか実行されてないので、次に1つ増やしてみます。geom_line により、ポイントの間をラインで結ぶことができます。  

```{r}
ggplot(df, aes(time, x)) +
  geom_point(size = 2) + 
  geom_line()
```

これだけだと、何が階層グラフィックス文法なのかわからないので、geom_line でラインの色を変えてみます。  

```{r}
ggplot(df, aes(time, x)) +
  geom_point(size = 2) + 
  geom_line(col = "red")
```

各ポイントをよく見ると、ポイントマーカーの手前側にラインが表示されていて、ポイントが見づらくなってるのがわかると思います。これは、geom_point の後に geom_line で描画したためです。そこで逆にしてみましょう。  

```{r}
ggplot(df, aes(time, x)) +
  geom_line(col = "red") +    　# geom_line を先に実行
  geom_point(size = 2)
```

こうすると、ラインが先に、その後にポイントが描画されるので、ラインがポイントの後ろに来ます。この部分は、Excelは自動でやってくれる（というか順序入れ替えできない？）ので、面倒に思う部分だと思います。が、ラインとポイントの色を異なる色にすることはあんまりないと思うので、今みなさんが感じるほど面倒と思うことはあまりありません。  
ここで言いたいことは、とにかく  

<big>
後に実行したものが手前に来る
</big>

ということで理解してもらえれば十分です。  

## いろいろな geom  

ここから先はいろいろな geom を紹介します。いっぱいあって全部は紹介しませんが、よく使うものや便利なものを中心に紹介します。ただ読むだけではつまらないと思うので、後ろの方に練習問題を用意しましたのでお楽しみに。  

### geom に共通の設定

イントロダクション含めて何度も出てきている geom_point を例に、どの geom でも共通の設定をここでまとめます。基本的なコマンドの実行方法は次のとおり。  

```{r}
# 基本
ggplot(data = mpg, aes(x = displ, y = hwy, col = class)) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン） 
  geom_point()
```

ggplot() + geom_〇〇　というのが基本形です。

ggplot()の中での設定：  

* data: これから描画するデータを指定（データフレーム）  
* aes: エステティック属性を指定。ここでは x軸、y軸の指定＋色分けにどの変数を用いるか指定。変数は data で指定したデータフレームの変数のみ指定可能。  

データフレームにどんな変数名の変数が含まれるかは、以下のコマンドで確認可能です。  

```{r}
# データフレームに含まれるデータの変数名の確認方法①
str(mpg)
```

この出力の一番左の列に注目してください。manufacturer 〜 class まで、11 個の変数が含まれているのがわかります。今後データフレームの作り方は説明しますが、自分で作ったデータフレームでも、変数名を忘れることがあるので、このコマンドが便利です。  

ところで、次の方法でも確認は可能です。

```{r echo = TRUE}
# データフレームに含まれるデータの変数名の確認方法②
mpg
```

今後は一番上の行に着目してください。manufacturer から右に向かって変数が並んでいますのでそこから確認することもできますが、列数が多いと画面に入り切らないのでスクロールが必要です。  

どっちか好きな方でやってみてください。  

------------------------------------------------------------------------------------------
ちょっと戻って、aes()の中で指定する項目について、今回は散布図の色分けを class という変数に応じて行っています。このように、データフレームのある変数の水準にしたがって色分けすると傾向がつかみやすくなって便利です。他の変数に変更して試してみてください。  

ちなみに他のやり方で区別することも可能です。よく使うのは、

* size: マーカーのサイズを水準に応じて変える  
* alpha: マーカーの透明度を水準に応じて変える  
* shape: マーカーの形を水準に応じて変える  

これらはイントロダクションでも紹介しましたので、例は省略します。  

また、aes() は geom の中で実行することも可能です。    

```{r}
# geom の中で　aes() を指定する
ggplot(data = mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン） 
  geom_point(aes(x = displ, y = hwy, col = class))
```

さきほどと同じ図が出力されます。これは、ggplot(aes())の場合は、その後に実行する geom すべてに適用されるのに対して、geom_point(aes())などとした場合は、**その geom の中だけで aes() の設定が有効**、という違いがあります。今回は　geom が1つだけなので、両者は同じになりました。geom を複数実行する場合は、geom　ごとに色の付け方などを変えられるようになっている、ということになります。  

ちなみにすべてのマーカーを同じ色にしたい、というような場合は、（geom の中で）col を aes()の外に出して実行します（注：ggplot(aes(), col = "red") では実行できません）。  

```{r}
# マーカーの色をすべて同じ色に変える
ggplot(data = mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン） 
  geom_point(aes(x = displ, y = hwy), col = "red")  # col を aes() の外に出す
```

最後に、"data =" や、"x =" という部分は省略可能です。慣れてきたら次のようにしましょう。  

```{r}
# data = や x = を省略
ggplot(mpg) +  # displ：排気量, hwy：高速道路での燃費（マイル/ガロン） 
  geom_point(aes(displ, hwy, col = class))  
```

ただし、col や　size などは省略できませんので注意してください。  

### geom_point, geom_jitter - 散布図  

何度も出てきているのでもう飽きたかもしれませんが、まだ紹介してない機能があるのです。 
直前にプロットした、displ - hwy の図を見てください。displ は離散的な数値しか取らない変数であることがわかります。それでプロットしているので、ポイントが重複しているかもしれません。こんなときは、次の引数を設定すると便利です。  

```{r}
ggplot(mpg) + 
  geom_point(aes(displ, hwy, col = class), position = "jitter")  # position = jitter 追加
```

何か点が増えた気がします。position = jitter を 指定すると、本来の値から少しだけずらしてプロットして重複しないようにしてくれます。ずらす量はデフォルトでいい感じに計算してくれますが、明示的に指定することも可能です。その場合は、geom_point の代わりに geom_jitter を使います。

```{r}
# geom_jitter
ggplot(mpg) + 
  geom_jitter(aes(displ, hwy, col = class), width = 1)
```

## geom_line, geom_smooth - ライン

ラインを描くのはもうやりました。異なる系列でラインの色を分けるときなどは col を活用しましょう。  
ここではデータに適合する曲線を描く方法を紹介します。  

```{r}
# データに適合する直線を描く
ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  geom_smooth(method = "lm")  # 線形回帰
```

上の図はすべての点（class などごとではなく）を近似する直線を描いています。青い曲線の上下に幅のあるグレー帯は適合の誤差範囲で、推定したパラメータ（ここでは、切片と勾配）の95％信頼区間を表しており、se 引数でオンオフ切り替えられます（注：データのばらつき範囲ではありません）。method を変えると他の方法で描くことも可能です。  

```{r}
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  geom_smooth(method = "loess")  # loess による適合
```

col を指定することで、変数の水準ごとに曲線を適合させることも可能です。  

```{r}
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy, col = drv)) +
  geom_point() +
  geom_smooth(method = "loess")  # loess による適合
```

ちなみに色分けしないで良いときは group により指定します。  

```{r}
# データに適合する曲線を描く
ggplot(mpg, aes(displ, hwy, group = drv)) +   # col → group に変更
  geom_point() +
  geom_smooth(method = "loess")  # loess による適合
```


## geom_boxplot - 箱ひげ図  

散布図でも似たようなことはできますが、分布の要約も含めて可視化できるのが geom_boxplot です。  

```{r}
# 箱ひげ図
ggplot(mpg, aes(class, hwy)) +
         geom_boxplot()
```

上と下にひげ生えていて、真ん中に箱がある図が並んでますが、こういうものです。箱の下端、上端はそのデータ群の25％、75％分位点を表しています。分位点というのはデータを小さい順に下から並べたとき、25％点なら 下から数えて25％の順位のところ、75％点なら下から数えて75％の順位のところの値のことです。50％点はちょうど真ん中にくる値なので、中央値（median）と呼ばれます。例えば 2seater では、下から数えて 25％の順位に来るのが hwy = 24 くらい、75％のところに来るのが hwy = 26 くらいです。つまり、hwy = 24〜26 の間に、全データの 50％が含まれていることになります。この範囲を四分位範囲（Inter Quatile Range）と呼びます。その他の説明は次の図を参照してください。outliersは外れ値で、明らかに値が外れたもの明示しています。

![ ](boxplot.png)

↑Shift + Clickで拡大図になります。  

<https://r4ds.had.co.nz/exploratory-data-analysis.html> より抜粋。 

横軸のそれぞれの水準で、着目する変数がどんな分布をしているか分かりやすいですね。例えば、pickup と suv は他と比べて明らかに燃費が悪いようだ- など。    

箱ひげ図は横軸に離散変数、縦軸に連続変数を取ることに注意してください。離散変数とはその名の通り離散的な値しか取らない変数のことですが、文字列やファクタのことです（詳細後日）。↑の例は、class変数が文字列型になっています。2seaterとか、compact とかは文字列型、と呼ばれます。一方、ファクタ型は一見して数値ですがレベルを表すだけでその差には意味がない変数のことを指します。例えば、アンケートの評点です。1,2,3,4,5 段階で評価した点数は、水準を表すだけで、差に意味はありません（意味あるのもあるかもしれませんが）。どのデータが何型なのかは、変数名を確認するときに使った str() で確認することができます（文字列型："chr"、ファクター："factor"）。  

なお、geom_boxplotの場合は、色の割当が col ではなく fill になります。  

```{r}
# 箱ひげ図：色分け
ggplot(mpg, aes(class, hwy, fill = class)) +
         geom_boxplot()
```

## geom_bar - 棒グラフ  

棒グラフの方がデータを比較しやすいこともありますが、デフォルトの設定ではカウントデータを表示することに注意してください。  

```{r}
# 棒グラフ
ggplot(diamonds) +
  geom_bar(aes(cut))
```

↑の図は、横軸に cut（離散変数）ですが、縦軸はコマンドでは何も指定していません。この場合、縦軸はカウントデータになります。つまり、cut が Ideal のものは 20,000個以上、cut が Premium のものは 14,000個くらいのデータが含まれていることが分かります。このデータセットは Ideal, Premium, Very Good がほとんどで、Good や Fair は割合が少ないことが分かります。　　

実用的にはカウントデータではなく、異なる水準のデータを比較したいことが多いと思います。こういう場合は、stat = "identity" を追加します。ここでは、diamonds の cut ごとの平均価格を比較したいと思いますが、それを導くコードは後日説明しますので、流してください。  

```{r}
# cut ごとの diamonds の平均価格 - 後日説明
price.mean <- diamonds %>%
  group_by(cut) %>%          # cut でデータをグループ化
  summarize(                 # 要約量を出力する関数
    price = mean(price)      # mean: 平均値を出力
  )

# 棒グラフ
ggplot(price.mean, aes(fill = cut)) +          # geom_bar も fill で色分けする
  geom_bar(aes(cut, price), stat = "identity")
```

縦軸カウントの棒グラフに戻ると、いろいろできます。次の例は、積み上げ棒グラフです。 fill を指定しているところがポイントです。

```{r}
# 積み上げ棒グラフ
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar()
```

縦軸がカウントになっていて、絶対数での比較ができますが、割合で比較したいこともあると思います。その場合は次のようになります。  

```{r}
# 積み上げ棒グラフ - 割合
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar(position = "fill")       # position = "fill" を指定
```

縦軸のラベルが count のままですが、0-1になっていることに注意してください。  
もう一つの例は、積み上げではなくて横にならべるタイプです。こちらも　position 引数で変更可能です。  


```{r}
# 積み上げ棒グラフ
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar(position = "dodge")    # position = "dodge" を指定
```

## geom_histogram, geom_freqpoly - 分布を確認する

geom_bar は、横軸が離散変数になっていたのに気づいたでしょうか。次は横軸が連続変数の場合のカウントデータのグラフです。  

```{r}
ggplot(diamonds, aes(price)) +
  geom_histogram(fill = "purple", bins = 20, col = "black")
```

お気づきのとおり、横軸の区分けの数は、bins で指定しています。指定数を変えると見え方が変わるので、試してみてください。また、区分けの数ではなくて、区分けの幅で指定したいときもあると思います。この場合は、bins の代わりに binwidth を使います。

```{r}
ggplot(diamonds, aes(price)) +
  geom_histogram(fill = "purple", binwidth = 500, col = "black")
```

実験データに対する使い方としては、例えば測定値がある一定の数の範囲に収まっているか知りたいときに使います。  

```{r}
x <- tibble(val = rnorm(10000, mean = 0, sd = 1))    # 標準正規分布にしたがう乱数を10000個生成
ggplot(x, aes(val)) +
  geom_histogram(col = "black", fill = "green")
```

当たり前ですが、正規分布にしたがってそうです。分布の形や、平均値（または中央値）の値を可視化することで、思った通りの分布のデータが得られているか、平均値や分布の形に偏りがないかを確認することができます。ちなみに同じ用途で geom_boxplot も使えますが、geom_boxplot では頻度までは表現していないのでこちらの方がわかりやすいことが多いと思います。  

参考：平均値や標準偏差を求める  

```{r}
# 平均値
mean(x$val)
```

```{r}
# 標準偏差
sd(x$val)
```

```{r}
# 分位点を求める
summary(x$val)
```

ほかにも、median（中央値）、var（分散）などを求める関数があります。  


ところで、diamonds の価格（price）は、cut や clarity の影響を受けていると思われます。さきほど描いた図はこれらの区別なくカウントしたデータのヒストグラムなので、その辺の区別をしたいことがあります。今までの知識を使うと、下のように実行すればできそうですが、、、  

```{r}
ggplot(diamonds, aes(price, fill = cut)) +
  geom_histogram(col = "black")
```

ヒストグラムが重なっちゃってよくわからないですね。こういうときはに geom_freqpoly を使います。  

```{r}
ggplot(diamonds, aes(price, col = cut)) +
  geom_freqpoly()
```

この場合、ヒストグラムのように棒グラフではなく、線グラフでそれぞれの分布が描かれますので、区別ができます。ちなみに線が細くてわかりづらい、という場合は、

```{r}
ggplot(diamonds, aes(price, col = cut)) +
  geom_freqpoly(size = 1)        # size を追加
```

## geom_count, geom_tile, geom_bin2d - 3軸グラフ または ヒートマップ  

面内でグラフを書く以上、2軸が基本ですが、Rでは5軸まで可能です。が、実際解釈しやすいのは3軸までではないでしょうか。ということで3軸の書き方の例を紹介します。まずは geom_count から。縦軸、横軸ともに離散変数であることに留意してください。  

```{r}
# geom_count
ggplot(diamonds) +
  geom_count(aes(cut, color))
```

これは縦軸、横軸が離散変数で、マーカーの大きさによって数を表すグラフです。ちなみに、各点の具体的な数値は以下のコードで確認できます。cut が 5 水準、color が 7 水準あるので 35 個出てきます。今後説明する内容を含みますが、まだ理解できなくてもOKです。  
```{r}
# 変数の組み合わせごとのデータをカウントする
diamonds %>%
  count(cut, color)
```

次にヒートマップです。これ描けると何かそれっぽいです。上のコードを利用して各水準の組み合わせのカウントデータを色分けします。  

```{r}
diamonds %>%
  count(cut, color) %>%
  ggplot(aes(color, cut)) +
  geom_tile(aes(fill = n))
```

続いて、縦軸横軸が連続変数の場合は、geom_bin2d が使えます。  

```{r}
ggplot(diamonds) +
  geom_bin2d(aes(carat, price))
```

色が見づらい、という場合は変更可能です。

```{r}
ggplot(diamonds) +
  geom_bin2d(aes(carat, price)) +
  scale_fill_gradientn(colors = rainbow(7))
```

```{r}
ggplot(diamonds) +
  geom_bin2d(aes(carat, price)) +
  scale_fill_gradient(low = "black", high = "white")
```

色の指定方法はたくさんあるので、こんな色づけできる？と思ったらご質問ください。  

ところでここまでの例は色付けをカウントデータにしていましたが、指定した変数で色付けすることも可能です。  

```{r}
ggplot(diamonds, aes(cut, cut_number(carat, 15), fill = price)) +
  geom_tile(col = "black", size = 0.5) +
  scale_fill_gradientn(colors =heat.colors(10))
```

今回使っているデータでは、ダイヤモンドの価格は cut の良し悪しにはあまり依存せず、ダイヤの大きさ carat の影響が大きいようです。  
なお、この例では、連続変数である carat を、cut_number で区分け数を指定して離散変数にしています。

## facet_wrap, facet_grid - 図を水準ごとに分けて描く  

前項はマーカーの大きさや色によって軸を増やしましたが、もう一つの方法がファセットです。  

* facet_wrap：1軸増やす  
* facet_grid：2軸増やす  

という使い分けです。  

```{r}
# facet_wrap
ggplot(diamonds, aes(carat, price)) +
  geom_point() +
  facet_wrap(~cut, ncol = 2)
```

```{r}
# facet_grid
ggplot(diamonds, aes(carat, price)) +
  geom_point() +
  facet_grid(color~cut)
```

ちなみに color はダイヤの色で、Jが最悪、Dが最良の指標です。D の方が carat に対する価格の勾配が大きいようです。  

## 練習問題 

### 問題1：geom_pointとgeom_smooth  

データセット：mpg について、次の図を描くのにトライしてみてください。 
  
![練習問題1-1](./exercise/ex1-1.png)

↑Shift + Clickで拡大図になります。    

![練習問題1-2](./exercise/ex1-2.png)
![練習問題1-3](./exercise/ex1-3.png)

![練習問題1-4](./exercise/ex1-4.png)

![練習問題1-5](./exercise/ex1-5.png)

![練習問題1-](./exercise/ex1-6.png)

### 問題2：geom_boxplot  

データセット：diamonds について、以下の問題にトライしてみましょう。  

1) diamonds に含まれる変数はどんなものが含まれるか。  
2) そのうち、離散変数は何か。
3) いずれかの離散変数に対して、price の箱ひげ図を描く。  

### 問題3: geom_bar  

データセット：mpg について、次の図を描くのにトライしてみてください。  

![練習問題3-1](./exercise/ex3-1.png)

![練習問題3-2](./exercise/ex3-2.png)

ヒント：黒い枠線は col = "black" で描けます。  

![練習問題3-3](./exercise/ex3-3.png)

ヒント：cyl は連続変数のため、factor(cyl）とすることでファクタ（離散値）に変換できます。  

![練習問題3-4](./exercise/ex3-4.png)

## 問題4 3軸グラフ  

データセット mpg について、どんなものでも良いので 3軸グラフを描いてみましょう。  
自分が面白いと思う変数の組み合わせを探してみるのも良い練習になると思います。  


## 問題5 ファセット

データセット mpg について、次の図を書いてみましょう。

![練習問題5](./exercise/ex5.png)

# 図を見やすくする  

ここまでいろいろな geom を紹介してきましたが、図が見づらいと思う部分もあったと思います。そういう場合、いろいろなデコレーションをすることができます。ここでは以下の内容を紹介します。  

* グラフ全体の体裁を変える  
* 軸にタイトルをつける  
* グラフにタイトルをつける  
* グラフの文字の大きさを変える  
* グラフの表示範囲を変更する  
* グラフの目盛を変える  
* 目盛線の体裁を変える
* 軸を入れ替える  

ここでは、geom は以下のものを使い、使いまわしますので変数に代入しておきます。  

```{r}
p <- ggplot(mpg, aes(displ, hwy, col = class)) + 
  geom_point()
p
```

## theme_** - グラフ全体の体裁を変える 

デフォルトのテーマは今まで見てきた色合いですが、これは変えられます。下のチャンク内で、theme まで入力すると、候補がいろいろ出てくると思いますが、そのうち上側のものです。ここでは、theme_bw を使ってみます。  

```{r}
p + theme_bw()   # () を忘れずに
```

少し印象変わったのが分かるでしょうか。他のものも試してみてください。  

## labs or scale ファミリー - 軸にタイトルをつける  

デフォルトでは変数名が表示されますが、自由に変更できます。やり方は labs と scale ファミリーの2つがあります。簡単なのは labs です。  

```{r}
p + labs(x = "排気量", y = "高速道路上の燃費")
```

scale　ファミリーはちょっと長いですが、軸の目盛りを変更するときなどに使うので、一緒に設定したいときに使ったりします。  

```{r}
p + 
  scale_x_continuous(name = "排気量") +
  scale_y_continuous(name = "高速道路上の燃費")
```

labs, scale ファミリーともに、タイトルをダブルクォーテーションで囲うのを忘れずに。  


## labs or ggtitle - グラフにタイトルをつける  

グラフ自体にタイトルをつけたいときは、前項と同じく labs を使うか、ggtitle を使います。これはどっちでも良いです。  

```{r}
p + labs(title = "クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜")
```

```{r}
p + ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜", hjust)
```

タイトルを真ん中に配置したいときは、theme を追加してください。  

```{r}
p +
  ggtitle("クルマの排気量 vs 高速道路上の燃費", subtitle = "〜mpg データセット〜") +
  theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjus = 0.5))
```

なお、すべてのグラフに真ん中のタイトルをつけたいときは、下記を実行しておくと theme の指定は不要です。

```{r}
theme_update(plot.title = element_text(hjust = 0.5))
```

# thme - グラフの文字の大きさを変える  

グラフにはいろいろなところに文字列が表示されていますが、全体（といっても、グラフタイトル、軸のタイトル、凡例のタイトルは別れている）の指定の他、個別の指定（軸ごとにタイトルの大きさ変える、など）も可能です。  

```{r}
# 全体の大きさを変える：全文字列に適用
p + 
  ggtitle("クルマの排気量 vs 高速道路上の燃費") +
  theme(text = element_text(size = rel(4)),
        plot.title = element_text(size = rel(4)),
        legend.text = element_text(size = rel(3)))
```

## scale_x_continuous, scale_y_continuous -  グラフの表示範囲を変更する、目盛を変える 

特に軸が連続変数の場合、特定の領域に制限してプロットしたいときがあると思います。これには、軸タイトルの設定でも出てきた scale ファミリーの内、scale_x_continuous, scale_y_continuous を使います。  

```{r}
# 表示範囲を変える
p + 
  scale_x_continuous(limits = c(4,7)) +
  scale_y_continuous(limits = c(10, 30))
```

目盛の間隔を変えたいときは、breaks を設定します。breaks には、刻みのベクトル（データ列）を指定する必要があります。例えば、x軸を 1, 1.5, 2 ...、y軸を 10, 12.5, 15.0, ... としたい場合は、R の関数 seq() を使うと簡単です。  

```{r}
# 目盛りを変える
p + 
  scale_x_continuous(breaks = seq(1, 7, by = 0.5)) +
  scale_y_continuous(breaks = seq(10, 50, by = 2.5))
```

seq() は sequential（シーケンシャル）の意味で、等間隔に増えるベクトルを作る関数です。上で使ったデータの中身を見てみると、

```{r}
seq(1, 7, by = 0.5)   # Ctrl + Enter で実行
```

scale_x_continuous の breaks は、このデータにしたがって目盛の刻みを指定するようになっています。  

##  目盛線の体裁を変える - theme 再び  

印刷すると目盛線が消えてしまう、とかそもそも表示したくない、とかいうときに使います。  

```{r}
# 目盛線の色や太さを変える
p + 
  theme(
    panel.border = element_rect(color = "black", fill = NA),
    panel.grid.major = element_line(color = "black", size = 0.3),
    panel.grid.minor = element_line(color = "black", size = 0.3)
    )
```

非表示にする場合は、次のように指定します。

```{r}
# 目盛線を非表示にする
p + 
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
    )
```

# cood_flip - 軸を入れ替える

棒グラフや箱ひげ図のときに、ラベルが見えにくいなどの理由で変更したいときがあります。  

```{r}
ggplot(diamonds, aes(cut, price)) +
  geom_boxplot() +
  coord_flip()
```

今回は以上で終了です。次回は、データセットの作り方について、基礎の基礎から紹介します。  


